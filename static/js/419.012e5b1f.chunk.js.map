{"version":3,"file":"static/js/419.012e5b1f.chunk.js","mappings":"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","sources":["redux/contact/selectors.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setStatusFilter } from '../../redux/contact/filtersSlice';\nimport { selectFilter } from '../../redux/contact/selectors';\nimport {} from './Filter.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilter = e => {\n    dispatch(setStatusFilter(e.target.value));\n  };\n\n  return (\n    <div className=\"filter\">\n      <label className=\"filter-contact\">Find contacts by name </label>\n      <input\n        id=\"outlined-search\"\n        type=\"search\"\n        value={filter}\n        onChange={handleFilter}\n        placeholder=\"Enter by name\"\n        className=\"input\"\n      />\n    </div>\n  );\n};\nexport default Filter;\n","import React from 'react';\nimport './ContactForm.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contact/operations';\nimport { selectContacts } from '../../redux/contact/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    const formData = {\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n\n    const isExist = Array.isArray(contacts)\n      ? contacts.find(\n          contact =>\n            contact.name.toLowerCase() === formData.name.toLowerCase().trim()\n        )\n      : null;\n\n    if (isExist) {\n      alert(`${formData.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(formData));\n    e.target.reset();\n  };\n\n  return (\n    <div className=\"phonebook-form\">\n      <h1 className=\"phonebook-title\">Phonebook</h1>\n      <form onSubmit={handleFormSubmit} className=\"form-container\">\n        <div className=\"form-group\">\n          <label className=\"form-title-cont\" htmlFor=\"name\">\n            Name:\n          </label>\n          <input\n            className=\"input-contact\"\n            type=\"text\"\n            name=\"name\"\n            required\n            placeholder=\"Enter by name\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label className=\"form-title-cont\" htmlFor=\"number\">\n            Number:\n          </label>\n          <input\n            type=\"text\"\n            name=\"number\"\n            required\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            className=\"input-contact\"\n            placeholder=\"Enter by number\"\n          />\n        </div>\n        <button className=\"namebtn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport './ContactItem.css';\nimport { deleteContact } from '../../redux/contact/operations';\nimport Avatar from '@mui/material/Avatar';\nimport Stack from '@mui/material/Stack';\nimport * as React from 'react';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"contact-item\" key={id}>\n      <Stack direction=\"row\" spacing={2}>\n        <Avatar\n          className=\"avatar\"\n          alt={name}\n          src=\"https://bit.ly/dan-abramov\"\n        />\n      </Stack>\n      <span className=\"item\">{name} </span>\n      <span className=\"item\">{number} </span>\n      <button\n        className=\"deletebtn\"\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default ContactItem;\n","import './ContactList.css';\nimport { useSelector } from 'react-redux';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from '../../redux/contact/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  return (\n    <div className=\"contactlist-list\">\n      {filteredContacts.map(({ name, number, id }) => (\n        <ContactItem key={id} name={name} id={id} number={number} />\n      ))}\n    </div>\n  );\n};\n\nexport default ContactList;\n","import { RotatingLines } from 'react-loader-spinner';\nimport {} from './Loader.css';\nexport const Loader = () => {\n  return (\n    <div className=\"RotatingLines\">\n      <RotatingLines\n        strokeColor=\"wheat\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","import Filter from '../../components/Filter/Filter';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contact/operations';\nimport { selectError, selectIsLoading } from '../../redux/contact/selectors';\nimport {} from './Contacts.css';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div className=\"contact-main\">\n      <ContactForm />\n      <h2 className=\"contact-contacts\">Contacts</h2>\n      <Filter />\n      <ContactList />\n      {isLoading && <Loader />}\n      {isLoading && !error && <b>Request in progress...</b>}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","createSelector","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","_jsxs","className","children","_jsx","id","type","value","onChange","e","setStatusFilter","target","placeholder","onSubmit","preventDefault","formData","elements","number","Array","isArray","find","trim","alert","concat","addContact","reset","htmlFor","required","pattern","_ref","Stack","direction","spacing","Avatar","alt","src","onClick","deleteContact","filteredContacts","map","ContactItem","Loader","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","Contacts","useEffect","fetchContacts","ContactForm","Filter","ContactList"],"sourceRoot":""}